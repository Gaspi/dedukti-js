
ind : Type;
1 : ind;
2 : ind;
3 : ind;
4 : ind;
5 : ind;
6 : ind;
7 : ind;
8 : ind;
9 : ind;
X : ind;

P : ind -> ind;
: P 1 --> X;
: P 2 --> 1;
: P 3 --> 2;
: P 4 --> 3;
: P 5 --> 4;
: P 6 --> 5;
: P 7 --> 6;
: P 8 --> 7;
: P 9 --> 8;

S : ind -> ind;
: S 1 --> 2;
: S 2 --> 3;
: S 3 --> 4;
: S 4 --> 5;
: S 5 --> 6;
: S 6 --> 7;
: S 7 --> 8;
: S 8 --> 9;
: S 9 --> X;

trunc3 : ind -> ind;
:  trunc3 1 --> 1;
:  trunc3 2 --> 1;
:  trunc3 3 --> 1;
:  trunc3 4 --> 4;
:  trunc3 5 --> 4;
:  trunc3 6 --> 4;
:  trunc3 7 --> 7;
:  trunc3 8 --> 7;
:  trunc3 9 --> 7;

bool : Type;
T : bool;
F : bool;

and : bool -> bool -> bool;
: and T x --> x;
: and F x --> F;

or : bool -> bool -> bool;
: or T x --> T;
: or F x --> x;

not : bool -> bool;
: not T --> F;
: not F --> T;

eq : ind -> ind -> bool;
: eq x x --> T;
: eq x y --> F;




line : Type;
l : ind -> ind -> ind -> ind -> ind -> ind -> ind -> ind -> ind -> line;

sudo : Type;
c : line -> line -> line -> line -> line -> line -> line -> line -> line -> sudo;

getl : ind -> line -> ind;
: getl 1 (l x * * * * * * * *) --> x;
: getl 2 (l * x * * * * * * *) --> x;
: getl 3 (l * * x * * * * * *) --> x;
: getl 4 (l * * * x * * * * *) --> x;
: getl 5 (l * * * * x * * * *) --> x;
: getl 6 (l * * * * * x * * *) --> x;
: getl 7 (l * * * * * * x * *) --> x;
: getl 8 (l * * * * * * * x *) --> x;
: getl 9 (l * * * * * * * * x) --> x;

getc : ind -> sudo -> line;
: getc 1 (c x * * * * * * * *) --> x;
: getc 2 (c * x * * * * * * *) --> x;
: getc 3 (c * * x * * * * * *) --> x;
: getc 4 (c * * * x * * * * *) --> x;
: getc 5 (c * * * * x * * * *) --> x;
: getc 6 (c * * * * * x * * *) --> x;
: getc 7 (c * * * * * * x * *) --> x;
: getc 8 (c * * * * * * * x *) --> x;
: getc 9 (c * * * * * * * * x) --> x;




setl : ind -> ind -> line -> line;
: setl 1 k (l x1 x2 x3 x4 x5 x6 x7 x8 x9) --> (l k  x2 x3 x4 x5 x6 x7 x8 x9);
: setl 2 k (l x1 x2 x3 x4 x5 x6 x7 x8 x9) --> (l x1 k  x3 x4 x5 x6 x7 x8 x9);
: setl 3 k (l x1 x2 x3 x4 x5 x6 x7 x8 x9) --> (l x1 x2 k  x4 x5 x6 x7 x8 x9);
: setl 4 k (l x1 x2 x3 x4 x5 x6 x7 x8 x9) --> (l x1 x2 x3 k  x5 x6 x7 x8 x9);
: setl 5 k (l x1 x2 x3 x4 x5 x6 x7 x8 x9) --> (l x1 x2 x3 x4 k  x6 x7 x8 x9);
: setl 6 k (l x1 x2 x3 x4 x5 x6 x7 x8 x9) --> (l x1 x2 x3 x4 x5 k  x7 x8 x9);
: setl 7 k (l x1 x2 x3 x4 x5 x6 x7 x8 x9) --> (l x1 x2 x3 x4 x5 x6 k  x8 x9);
: setl 8 k (l x1 x2 x3 x4 x5 x6 x7 x8 x9) --> (l x1 x2 x3 x4 x5 x6 x7 k  x9);
: setl 9 k (l x1 x2 x3 x4 x5 x6 x7 x8 x9) --> (l x1 x2 x3 x4 x5 x6 x7 x8 k );

setc : ind -> (line -> line) -> sudo -> sudo;
: setc 1 k (c x1 x2 x3 x4 x5 x6 x7 x8 x9) --> (c (k x1) x2 x3 x4 x5 x6 x7 x8 x9);
: setc 2 k (c x1 x2 x3 x4 x5 x6 x7 x8 x9) --> (c x1 (k x2) x3 x4 x5 x6 x7 x8 x9);
: setc 3 k (c x1 x2 x3 x4 x5 x6 x7 x8 x9) --> (c x1 x2 (k x3) x4 x5 x6 x7 x8 x9);
: setc 4 k (c x1 x2 x3 x4 x5 x6 x7 x8 x9) --> (c x1 x2 x3 (k x4) x5 x6 x7 x8 x9);
: setc 5 k (c x1 x2 x3 x4 x5 x6 x7 x8 x9) --> (c x1 x2 x3 x4 (k x5) x6 x7 x8 x9);
: setc 6 k (c x1 x2 x3 x4 x5 x6 x7 x8 x9) --> (c x1 x2 x3 x4 x5 (k x6) x7 x8 x9);
: setc 7 k (c x1 x2 x3 x4 x5 x6 x7 x8 x9) --> (c x1 x2 x3 x4 x5 x6 (k x7) x8 x9);
: setc 8 k (c x1 x2 x3 x4 x5 x6 x7 x8 x9) --> (c x1 x2 x3 x4 x5 x6 x7 (k x8) x9);
: setc 9 k (c x1 x2 x3 x4 x5 x6 x7 x8 x9) --> (c x1 x2 x3 x4 x5 x6 x7 x8 (k x9) );




E : line := l X X X X X X X X X;
empty_sudoku : sudo := c E E E E E E E E E;


get : ind -> ind -> sudo -> ind;
: get i j s --> getl j (getc i s);

set : ind -> ind -> ind -> sudo -> sudo;
: set i j k s --> setc i (setl j k) s;


exists' : (ind -> bool) -> ind -> bool;
: exists' f X --> F;
: exists' f i --> or (f i) (exists' f (S i));

exists : (ind -> bool) -> bool := f => exists' f 1;



mem_line : ind -> ind -> ind -> sudo -> bool;
: mem_line i j k s --> exists (i':ind => eq (get i' j s) k);

mem_col  : ind -> ind -> ind -> sudo -> bool;
: mem_col i j k s --> exists (j':ind => eq (get i j' s) k);

mem_squ  : ind -> ind -> ind -> sudo -> bool;
: mem_squ i j k s -->
  (i':ind =>
   j':ind =>
    (or (eq (get i'         j'         s) k)
    (or (eq (get (S i')     j'         s) k)
    (or (eq (get (S (S i')) j'         s) k)
    (or (eq (get i'         (S j')     s) k)
    (or (eq (get (S i')     (S j')     s) k)
    (or (eq (get (S (S i')) (S j')     s) k)
    (or (eq (get i'         (S (S j')) s) k)
    (or (eq (get (S i')     (S (S j')) s) k)
        (eq (get (S (S i')) (S (S j')) s) k)))))))))
  )
  (trunc3 i) (trunc3 j);


check : ind -> ind -> ind -> sudo -> bool :=
i => j => k => s =>
     and (not (mem_line i j k s))
   ( and (not (mem_col  i j k s))
         (not (mem_squ  i j k s)));


solution : Type;
success : sudo -> solution;
fail : solution;


ite : bool -> solution -> solution -> solution;
: ite T x * --> x;
: ite F * x --> x;

iffail : solution -> solution -> solution;
: iffail (success x) * --> success x;
: iffail fail     d --> d;

solve : ind -> ind -> ind -> sudo -> solution;
:     solve i X * s --> solve (S i) 1 1 s;
:     solve X * * s --> success s;
:   solve i j X s --> fail;
: solve i j k s -->
  ite
    (eq (get i j s) X)
    (ite
      (check i j k s)
      (iffail
        (solve i (S j) 1 (set i j k s))
        (solve i j (S k) s)
      )
      (solve i j (S k) s)
    )
    (solve i (S j) 1 s);


solve_sudo : sudo -> solution := s => solve 1 1 1 s;
