type : Type;
T : type -> Type;

#CONST Sigma : A : type -> (T A -> type) -> Type;

pair : A : type -> B : (T A -> type) -> x : T A -> T (B x) -> Sigma A (x => B x);

fst : A : type -> B : (T A -> type) -> Sigma A (x => B x) -> T A;
: fst A B (pair A' B' x _) --> x;

// Generated constraint
//   Sigma A (x => B x)   ==   Sigma A' (x => B' x)
// since Sigma is injective, it is deconstructed into
//   A == A'              which is turned into a typing substitution
//   z  |-  B z == B' z   which is dropped *without warning* as it is satisfiable
